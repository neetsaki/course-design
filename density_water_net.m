function [Y,Xf,Af] =density_water_net(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 08-Sep-2018 20:23:44.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx1 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 0.00540540540540541;
x1_step1.ymin = -1;

% Layer 1
b1 = [-11.749613034092284636;20.920936643926175691;-7.0463151027819614924;5.1725650511720502323;0.30004123787706149518;3.092912309748141908;4.9854973245974250062;-7.6833916687485013242;11.619292878387744494;14.191110415372925502];
IW1_1 = [15.122842272977658595;-26.270478772517162014;13.17592422285815168;-15.791110492034565738;-12.541658202922770116;22.678569706226106462;14.966614434302663028;-13.867703543010554412;13.520080784718109257;13.808267346924328223];

% Layer 2
b2 = 0.13326855960547581703;
LW2_1 = [-0.37968264532820927837 -0.091952046844860024777 -0.16141157834355690515 0.10542090103694801151 0.11834897595626285571 -0.031744364422043022667 -0.067975129238819889665 0.040301384994465019873 -0.040801747410406097316 0.025283781632702326259];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00364033491081179;
y1_step1.xoffset = 450.5;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
